
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.3";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  console.log('üöÄ Edge Function called:', req.method, req.url);
  
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ CORS preflight handled');
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üì• Processing request...');
    
    let requestBody;
    try {
      requestBody = await req.json();
      console.log('üìã Request body received:', JSON.stringify(requestBody, null, 2));
    } catch (parseError) {
      console.log('‚ùå Failed to parse request body:', parseError);
      return new Response(
        JSON.stringify({ success: false, error: 'Invalid JSON in request body' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    
    const { action, operator, phone, code, phone_code_hash, password } = requestBody;

    // Basic validation
    if (!action) {
      console.log('‚ùå Missing action parameter');
      return new Response(
        JSON.stringify({ success: false, error: 'Missing action parameter' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    
    console.log('üîß Environment check:', {
      hasSupabaseUrl: !!supabaseUrl,
      hasSupabaseKey: !!supabaseKey
    });
    
    if (!supabaseUrl || !supabaseKey) {
      console.log('‚ùå Missing Supabase configuration');
      return new Response(
        JSON.stringify({ success: false, error: 'Server configuration error' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const supabase = createClient(supabaseUrl, supabaseKey);

    // Get Python API URL and parse it properly
    let PYTHON_API_URL = Deno.env.get('PYTHON_API_URL');
    
    if (!PYTHON_API_URL) {
      console.log('‚ùå Missing Python API URL');
      return new Response(
        JSON.stringify({ success: false, error: 'Python API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Clean the URL - remove trailing slash and any path components
    // Extract only the base URL (protocol + host + port)
    try {
      const url = new URL(PYTHON_API_URL);
      PYTHON_API_URL = `${url.protocol}//${url.host}`;
    } catch (error) {
      console.log('‚ùå Invalid Python API URL:', PYTHON_API_URL);
      return new Response(
        JSON.stringify({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Python API URL' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    
    console.log('üêç Python API URL check:', {
      hasPythonUrl: !!PYTHON_API_URL,
      baseUrl: PYTHON_API_URL
    });

    console.log('üéØ Processing action:', action);

    // Helper function to make requests to Python API with retry logic
    const callPythonAPI = async (endpoint: string, body: any, maxRetries = 2): Promise<any> => {
      // Construct full URL properly - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π URL + —ç–Ω–¥–ø–æ–∏–Ω—Ç
      const fullUrl = `${PYTHON_API_URL}${endpoint}`;
      
      for (let attempt = 1; attempt <= maxRetries; attempt++) {
        console.log(`üîÑ Attempt ${attempt}/${maxRetries} to call Python API:`, fullUrl);
        
        try {
          const fetchPromise = fetch(fullUrl, {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify(body),
          });

          const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Python API (30 —Å–µ–∫—É–Ω–¥)')), 30000)
          );

          const response = await Promise.race([fetchPromise, timeoutPromise]) as Response;

          console.log('üì° Python API response status:', response.status);
          console.log('üì° Python API response URL:', response.url);
          
          const responseText = await response.text();
          console.log('üìã Python API raw response (length:', responseText.length, '):', responseText.substring(0, 1000));
          
          if (!response.ok) {
            console.log('‚ùå Python API error:', response.status, response.statusText);
            
            let errorMessage = `–û—à–∏–±–∫–∞ Python API: HTTP ${response.status}`;
            try {
              const errorData = JSON.parse(responseText);
              if (errorData.error) {
                errorMessage = errorData.error;
                
                // Check if this is an asyncio error that we can retry
                if (errorMessage.includes('asyncio event loop') || 
                    errorMessage.includes('event loop') ||
                    errorMessage.includes('loop must not change')) {
                  console.log('üîÑ Detected asyncio error, will retry...');
                  if (attempt < maxRetries) {
                    console.log(`‚è≥ Waiting 2 seconds before retry ${attempt + 1}...`);
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    continue; // Retry
                  }
                  errorMessage = '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.';
                }
              }
            } catch (parseError) {
              console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ –∫–∞–∫ JSON');
              errorMessage = `HTTP ${response.status}: ${responseText}`;
            }
            
            return { success: false, error: errorMessage };
          }

          let data;
          try {
            data = JSON.parse(responseText);
          } catch (parseError) {
            console.log('‚ùå JSON parse error:', parseError);
            return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Python API' };
          }

          console.log('üìã Python API parsed data:', JSON.stringify(data, null, 2));
          return data;
          
        } catch (fetchError) {
          console.log(`‚ùå Fetch error on attempt ${attempt}:`, fetchError);
          
          // Check if this is a network error that we can retry
          if ((fetchError.message.includes('Failed to fetch') || 
               fetchError.message.includes('NetworkError') ||
               fetchError.message.includes('–¢–∞–π–º–∞—É—Ç')) && attempt < maxRetries) {
            console.log(`‚è≥ Network error, waiting 2 seconds before retry ${attempt + 1}...`);
            await new Promise(resolve => setTimeout(resolve, 2000));
            continue; // Retry
          }
          
          let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
          if (fetchError.message.includes('–¢–∞–π–º–∞—É—Ç')) {
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º';
          } else if (fetchError.message.includes('Failed to fetch') || fetchError.message.includes('NetworkError')) {
            errorMessage = '–°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
          }
          
          return { success: false, error: errorMessage };
        }
      }
      
      return { success: false, error: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–æ' };
    };

    // Handle sendCode action
    if (action === 'sendCode') {
      if (!phone || !operator) {
        console.log('‚ùå Missing required parameters for sendCode');
        return new Response(
          JSON.stringify({ success: false, error: 'Missing required parameters: phone and operator' }),
          { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      
      console.log('üìû Calling Python API send_code endpoint');
      
      const result = await callPythonAPI('/api/send_code', { phone: phone, operator: operator });
      
      if (result.success) {
        console.log('‚úÖ Code sent successfully');
        return new Response(
          JSON.stringify({ 
            success: true, 
            message: result.message || '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram',
            phone_code_hash: result.phone_code_hash
          }),
          { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      } else {
        console.log('‚ùå Python API returned error:', result.error);
        return new Response(
          JSON.stringify({ success: false, error: result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥' }),
          { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
    }

    // Handle verifyCode action
    if (action === 'verifyCode') {
      if (!phone || !code || !phone_code_hash || !operator) {
        console.log('‚ùå Missing required parameters for verifyCode:', { 
          phone: !!phone, 
          code: !!code, 
          phone_code_hash: !!phone_code_hash, 
          operator: !!operator 
        });
        return new Response(
          JSON.stringify({ success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞' }),
          { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      
      console.log('üîê Calling Python API verify_code endpoint');
      console.log('üîê Verification params:', { phone, code, phone_code_hash, operator });
      
      const requestBodyForPython = { 
        phone: phone, 
        code: code, 
        phone_code_hash: phone_code_hash,
        operator: operator 
      };
      console.log('üîê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:', JSON.stringify(requestBodyForPython));
      
      const result = await callPythonAPI('/api/verify_code', requestBodyForPython);
      
      if (result.success) {
        console.log('‚úÖ Code verified successfully');
        
        // Update database with authentication status
        try {
          const { error: dbError } = await supabase
            .from('telegram_accounts')
            .update({ 
              is_authenticated: true,
              session_data: result.session_data ? JSON.stringify(result.session_data) : null,
              last_active: new Date().toISOString()
            })
            .eq('operator_id', operator)
            .eq('phone_number', phone);

          if (dbError) {
            console.log('‚ùå Database update error:', dbError);
          } else {
            console.log('‚úÖ Database updated successfully');
          }
        } catch (dbError) {
          console.log('‚ùå Database operation failed:', dbError);
        }
        
        return new Response(
          JSON.stringify({ 
            success: true, 
            message: result.message || '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
            needs_password: result.two_factor_required || false
          }),
          { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      } else {
        console.log('‚ùå Python API returned verification error:', result.error);
        return new Response(
          JSON.stringify({ success: false, error: result.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' }),
          { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
    }

    // Handle checkPassword action for 2FA
    if (action === 'checkPassword') {
      if (!phone || !password || !operator) {
        console.log('‚ùå Missing required parameters for checkPassword');
        return new Response(
          JSON.stringify({ success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è' }),
          { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      
      console.log('üõ°Ô∏è Calling Python API verify_password endpoint');
      
      const result = await callPythonAPI('/api/verify_password', { 
        phone: phone, 
        password: password,
        operator: operator 
      });
      
      if (result.success) {
        console.log('‚úÖ 2FA verified successfully');
        
        // Update database with authentication status
        try {
          const { error: dbError } = await supabase
            .from('telegram_accounts')
            .update({ 
              is_authenticated: true,
              session_data: result.session_data ? JSON.stringify(result.session_data) : null,
              last_active: new Date().toISOString()
            })
            .eq('operator_id', operator)
            .eq('phone_number', phone);

          if (dbError) {
            console.log('‚ùå Database update error:', dbError);
          } else {
            console.log('‚úÖ Database updated successfully');
          }
        } catch (dbError) {
          console.log('‚ùå Database operation failed:', dbError);
        }
        
        return new Response(
          JSON.stringify({ 
            success: true, 
            message: result.message || '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
          }),
          { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      } else {
        console.log('‚ùå Python API returned 2FA error:', result.error);
        return new Response(
          JSON.stringify({ success: false, error: result.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' }),
          { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
    }

    // For other actions, return a simple response for now
    console.log('‚ö†Ô∏è Action not implemented yet:', action);
    return new Response(
      JSON.stringify({ success: false, error: '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: ' + action }),
      { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.log('üí• Unexpected error in Edge Function:', error);
    console.log('üí• Error stack:', error.stack);
    return new Response(
      JSON.stringify({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
