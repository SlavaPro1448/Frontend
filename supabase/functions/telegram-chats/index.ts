
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { action, phoneNumber, chatId, operatorId } = await req.json();
    console.log('üî• –ó–ê–ü–†–û–° –ö TELEGRAM API:', { action, phoneNumber, chatId, operatorId });

    const pythonApiUrl = Deno.env.get('PYTHON_API_URL');
    if (!pythonApiUrl) {
      console.error('‚ùå PYTHON_API_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return new Response(
        JSON.stringify({
          success: false,
          error: 'Python API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        }),
        { 
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('üåê –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –ù–ê:', pythonApiUrl);

    let apiUrl = '';
    let requestBody = {};

    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ Python API
    if (action === 'getDialogs') {
      apiUrl = `${pythonApiUrl}/api/chats/${operatorId}?phone=${encodeURIComponent(phoneNumber)}`;
      // GET –∑–∞–ø—Ä–æ—Å, —Ç–µ–ª–æ –Ω–µ –Ω—É–∂–Ω–æ
    } else if (action === 'getMessages') {
      apiUrl = `${pythonApiUrl}/api/messages/${operatorId}/${chatId}?phone=${encodeURIComponent(phoneNumber)}`;
      // GET –∑–∞–ø—Ä–æ—Å, —Ç–µ–ª–æ –Ω–µ –Ω—É–∂–Ω–æ
    } else {
      console.error('‚ùå –ù–ï–ò–ó–í–ï–°–¢–ù–û–ï –î–ï–ô–°–¢–í–ò–ï:', action);
      return new Response(
        JSON.stringify({
          success: false,
          error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`
        }),
        { 
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('üì° –û–¢–ü–†–ê–í–ö–ê GET –ó–ê–ü–†–û–°–ê –ù–ê:', apiUrl);

    const response = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    console.log('üì° –°–¢–ê–¢–£–° –û–¢–í–ï–¢–ê PYTHON API:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û–®–ò–ë–ö–ê PYTHON API:', errorText);
      
      return new Response(
        JSON.stringify({
          success: false,
          error: `Python API –æ—à–∏–±–∫–∞: ${response.status} - ${errorText}`
        }),
        { 
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    const data = await response.json();
    console.log('‚úÖ –£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢ –û–¢ PYTHON API:', data);

    return new Response(
      JSON.stringify(data),
      { 
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê EDGE FUNCTION:', error);
    
    return new Response(
      JSON.stringify({
        success: false,
        error: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`
      }),
      { 
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});
